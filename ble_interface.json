[
    {
        "id": "f7a852575a507e30",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9355c4bbb1adc9e0",
        "type": "mqtt-broker",
        "name": "zigbee2mqtt",
        "broker": "mqtt://192.168.1.105",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ff246c28cc0fa0af",
        "type": "mqtt-broker",
        "name": "mqtt_broker",
        "broker": "mqtt://192.168.1.105",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "8b5eb2f1c770a105",
        "type": "pythonshell in",
        "z": "f7a852575a507e30",
        "name": "humidity",
        "pyfile": "/home/waelkh12/ble_esp32.py",
        "virtualenv": "",
        "continuous": true,
        "stdInData": false,
        "x": 60,
        "y": 240,
        "wires": [
            [
                "beb41cc912f41cc6",
                "8c79dfb9635bfca3",
                "eda7e98a63d3a7c7"
            ]
        ]
    },
    {
        "id": "beb41cc912f41cc6",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 260,
        "wires": []
    },
    {
        "id": "8c79dfb9635bfca3",
        "type": "string",
        "z": "f7a852575a507e30",
        "name": "",
        "methods": [
            {
                "name": "between",
                "params": [
                    {
                        "type": "str",
                        "value": "temp"
                    },
                    {
                        "type": "str",
                        "value": "\\x"
                    }
                ]
            }
        ],
        "prop": "payload",
        "propout": "payload",
        "object": "msg",
        "objectout": "msg",
        "x": 290,
        "y": 140,
        "wires": [
            [
                "084417715251d3d6",
                "081931b6edc97dad"
            ]
        ]
    },
    {
        "id": "084417715251d3d6",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 140,
        "wires": []
    },
    {
        "id": "eda7e98a63d3a7c7",
        "type": "string",
        "z": "f7a852575a507e30",
        "name": "",
        "methods": [
            {
                "name": "between",
                "params": [
                    {
                        "type": "str",
                        "value": "temp 19.30 \\xc2\\xb0C\\x00\\x00\\x00\\x00\\x00\\x00' b'Humidity   "
                    },
                    {
                        "type": "str",
                        "value": "%\\x"
                    }
                ]
            }
        ],
        "prop": "payload",
        "propout": "payload",
        "object": "msg",
        "objectout": "msg",
        "x": 270,
        "y": 340,
        "wires": [
            [
                "abe2a069eb55f85c",
                "dcbea2b09aabcdb8"
            ]
        ]
    },
    {
        "id": "abe2a069eb55f85c",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 300,
        "wires": []
    },
    {
        "id": "d277eafa14bfd278",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "temperature_global_variable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 160,
        "wires": []
    },
    {
        "id": "d8a68157fd733884",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "set temperature as global variable",
        "func": "global.set(\"temperature\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 240,
        "wires": [
            [
                "d277eafa14bfd278"
            ]
        ]
    },
    {
        "id": "081931b6edc97dad",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "Convert temperature to number",
        "func": "msg.payload = parseFloat(msg.payload); // Convert string to float\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 180,
        "wires": [
            [
                "d8a68157fd733884"
            ]
        ]
    },
    {
        "id": "dcbea2b09aabcdb8",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "convert humidity to a number",
        "func": "msg.payload = parseFloat(msg.payload); // Convert string to float\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 340,
        "wires": [
            [
                "a68146fd61896e57"
            ]
        ]
    },
    {
        "id": "a68146fd61896e57",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "set humidity as global variable",
        "func": "global.set(\"humidity\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 340,
        "wires": [
            [
                "7b08a757d74ab51e"
            ]
        ]
    },
    {
        "id": "7b08a757d74ab51e",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "humidity_global_variable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 340,
        "wires": []
    },
    {
        "id": "40d3ab383a7174d9",
        "type": "inject",
        "z": "f7a852575a507e30",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 1020,
        "wires": [
            [
                "ec7d5f96c5d17087"
            ]
        ]
    },
    {
        "id": "ec7d5f96c5d17087",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "Get global variables",
        "func": "flow.set('Temperature', global.get(\"temperature\"));\nflow.set('Humidity', global.get(\"humidity\"));\nflow.set('tempecriticalvl', global.get(\"critical_temperature\"))\nflow.set('humiditycriticalvl', global.get(\"critical_humditiy\"))\nmsg.payload = [\n\nflow.get('Temperature'),\nflow.get('Humidity'),\nflow.get('tempecriticalvl'),\nflow.get('humiditycriticalvl')\n\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1020,
        "wires": [
            [
                "c4f17f2752f86c02"
            ]
        ]
    },
    {
        "id": "c4f17f2752f86c02",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "global variables array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1020,
        "wires": []
    },
    {
        "id": "ebb4b39d37faf46e",
        "type": "opcua-compact-server",
        "z": "f7a852575a507e30",
        "port": "4840",
        "endpoint": "",
        "productUri": "",
        "acceptExternalCommands": true,
        "maxAllowedSessionNumber": 10,
        "maxConnectionsPerEndpoint": 10,
        "maxAllowedSubscriptionNumber": 100,
        "alternateHostname": "",
        "name": "",
        "showStatusActivities": true,
        "showErrors": true,
        "allowAnonymous": true,
        "individualCerts": false,
        "isAuditing": false,
        "serverDiscovery": true,
        "users": [],
        "xmlsetsOPCUA": [],
        "publicCertificateFile": "",
        "privateCertificateFile": "",
        "registerServerMethod": "1",
        "discoveryServerEndpointUrl": "opc.tcp://192.168.1.105:4840",
        "capabilitiesForMDNS": "",
        "maxNodesPerRead": 1000,
        "maxNodesPerWrite": 1000,
        "maxNodesPerHistoryReadData": 100,
        "maxNodesPerBrowse": 3000,
        "maxBrowseContinuationPoints": 10,
        "maxHistoryContinuationPoints": 10,
        "delayToInit": 1000,
        "delayToClose": 200,
        "serverShutdownTimeout": 100,
        "addressSpaceScript": "function constructAlarmAddressSpace(server, addressSpace, eventObjects, done) {\n  // server = the created node-opcua server\n  // addressSpace = address space of the node-opcua server\n  // eventObjects = add event variables here to hold them in memory from this script\n\n  // internal sandbox objects are:\n  // node = the compact server node,\n  // coreServer = core compact server object for debug and access to NodeOPCUA\n  // this.sandboxNodeContext = node context node-red\n  // this.sandboxFlowContext = flow context node-red\n  // this.sandboxGlobalContext = global context node-red\n  // this.sandboxEnv = env variables\n  // timeout and interval functions as expected from nodejs\n\n  \n  const opcua = coreServer.choreCompact.opcua;\n  const LocalizedText = opcua.LocalizedText;\n  const namespace = addressSpace.getOwnNamespace();\n\n  const Variant = opcua.Variant;\n  const DataType = opcua.DataType;\n  const DataValue = opcua.DataValue;\n\n  var flexServerInternals = this;\n\n  \n  const rootFolder = addressSpace.findNode(\"RootFolder\");\n\n  this.sandboxFlowContext.set(\"Humidity\", false);\n  this.sandboxFlowContext.set(\"Temperature\", false);\n  this.sandboxFlowContext.set(\"critical_temperature\", false);\n  this.sandboxFlowContext.set(\"critical_humidity\", false);\n\n  const sensor_Data = namespace.addFolder(rootFolder.objects, {\n    \"browseName\": \"Sensor_data\"\n  });\n  const temperature = namespace.addFolder(sensor_Data, {\n    \"browseName\": \"temperature\"\n  });\n  const humidity = namespace.addFolder(sensor_Data, {\n    \"browseName\": \"humidity\"\n  });\n  const temperature_float = namespace.addFolder(temperature, {\n    \"browseName\": \"Float_C\"\n  });\n  const humidity_float = namespace.addFolder(humidity, {\n    \"browseName\": \"humidity_%\"\n  });\n  const tempCritical = namespace.addFolder(sensor_Data, {\n    \"browseName\": \"Temp_critical\"\n  });\n  const humidityCritical = namespace.addFolder(sensor_Data, {\n    \"browseName\": \"Humidity_critical\"\n  });\n  const temperature_var = namespace.addVariable({\n    \"organizedBy\": temperature_float,\n    \"browseName\": \"temperature\",\n    \"nodeId\": \"ns=1;s=Temperature_value\",\n    \"dataType\": \"Double\",\n    \"value\": {\n      \"get\": function () {\n        return new Variant({\n          \"dataType\": DataType.Double,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"Temperature\")\n        });\n      },\n      \"set\": function (Variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"Temperature\",\n          Variant.value\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n  const humidity_var = namespace.addVariable({\n    \"organizedBy\": humidity_float,\n    \"browseName\": \"Humidity\",\n    \"nodeId\": \"ns=1;s=Humidity_value\",\n    \"dataType\": \"Double\",\n    \"value\": {\n      \"get\": function () {\n        return new Variant({\n          \"dataType\": DataType.Double,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"Humidity\")\n        });\n      },\n      \"set\": function (Variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"Humidity\",\n          Variant.value\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n    const temperatureCritical = namespace.addVariable({\n    \"organizedBy\": tempCritical,\n    \"browseName\": \"Value\",\n    \"nodeId\": \"ns=1;s=Temp_critical_value\",\n    \"dataType\": \"Boolean\",\n    \"value\": {\n      \"get\": function () {\n        return new Variant({\n          \"dataType\": DataType.Boolean,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"critical_temperature\")\n        });\n      },\n      \"set\": function (variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"critical_temperature\",\n          variant.value\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n\n  const humidityCrit = namespace.addVariable({\n    \"organizedBy\": humidityCritical,\n    \"browseName\": \"Value\",\n    \"nodeId\": \"ns=1;s=Humidity_critical_value\",\n    \"dataType\": \"Boolean\",\n    \"value\": {\n      \"get\": function () {\n        return new Variant({\n          \"dataType\": DataType.Boolean,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"critical_humidity\")\n        });\n      },\n      \"set\": function (variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"critical_humidity\",\n          variant.value\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n\n  \n  done();\n}",
        "x": 540,
        "y": 1120,
        "wires": []
    },
    {
        "id": "ecad05a705fec415",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "Check Temperature and Humidity",
        "func": "// Define the acceptable range for temperature and humidity\nconst minTemperature = 10; // Minimum temperature\nconst maxTemperature = 20; // Maximum temperature\nconst criticatemp = 20; // critical temperature \nconst minHumidity = 30;    // Minimum humidity\nconst maxHumidity = 40;    // Maximum humidity\nconst critichumidity =80; // critical value for humidity\n// Get the incoming message payload\nvar temperature = global.get('temperature'); // Get temperature from global context\nvar humidity = global.get('humidity'); // Get humidity from global context\n// set global variables that can be used by opc_server\n\n\n// Initialize payload as a JSON object\nvar  data = {\n    timestamp: Date.now(),\n    temperature: temperature,\n    humidity: humidity,\n    criticalhumidity : false,\n    criticaltemp : false,\n    temperatureEvent: \"\",\n    humidityEvent: \"\",\n    turnAC: false // Initialize turn AC variable\n};\n\n\n// Check if temperature is within the acceptable range\nif (temperature < minTemperature) {\n    // Temperature is below the acceptable range\n    data.temperatureEvent = \"Below Min\";\n} else if (temperature > maxTemperature) {\n    // Temperature is above the acceptable range\n    data.temperatureEvent = \"Above Max\";\n    \n}\nelse if (temperature > criticatemp) {\n    // Humidity is above the acceptable range\n    data.criticaltemp= true;\n    }\nelse {\n        msg.payload.temperatureEvent = \"No action\"\n    }\n// Check if humidity is within the acceptable range\nif (humidity < minHumidity) {\n    // Humidity is below the acceptable range\n    data.humidityEvent = \"Below Min\";\n} else if (humidity > maxHumidity) {\n    // Humidity is above the acceptable range\n    data.humidityEvent = \"Above Max\";\n    }\n    \n\nelse {\n        data.humidityEvent = \"No action\"\n    }\n\n// Set turn AC variable based on conditions\nif (data.temperatureEvent === \"Above Max\" || data.humidityEvent === \"Above Max\" || data.criticaltemp==true) {\n    data.turnAC = true; // Turn on AC\n} else {\n    data.turnAC = false; // Turn off AC\n}\n\n\n\n// Return message\nreturn {payload: data};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 660,
        "wires": [
            [
                "c30f220d9f8f57af",
                "2e2d11dc8c879b17",
                "de607af13c5134a0",
                "20c1b3c67b6dcd17",
                "fa107051b12614c0"
            ]
        ]
    },
    {
        "id": "c30f220d9f8f57af",
        "type": "csv",
        "z": "f7a852575a507e30",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "",
        "multi": "one",
        "ret": "\\n",
        "temp": "timestamp,temperature,humidity,temperatureEvent,humidityEvent,turnAC",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 550,
        "y": 660,
        "wires": [
            [
                "4eecbf50ba453b9f"
            ]
        ]
    },
    {
        "id": "4eecbf50ba453b9f",
        "type": "file",
        "z": "f7a852575a507e30",
        "d": true,
        "name": "",
        "filename": "C:\\Users\\waelk\\Desktop\\test.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 780,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "f9bc82a6ad3ddf13",
        "type": "inject",
        "z": "f7a852575a507e30",
        "name": "Simulate Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 660,
        "wires": [
            [
                "ecad05a705fec415"
            ]
        ]
    },
    {
        "id": "2e2d11dc8c879b17",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "object containing_data_and_events",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 740,
        "wires": []
    },
    {
        "id": "bfb44c309a89d080",
        "type": "comment",
        "z": "f7a852575a507e30",
        "name": "sending notifications to2",
        "info": "",
        "x": 100,
        "y": 740,
        "wires": []
    },
    {
        "id": "de607af13c5134a0",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "check_critical_temperature_trigger",
        "func": "var inputObject = msg.payload;\n\nvar criticalTemperature = inputObject.criticaltemp;\nvar criticalHumidity = inputObject.criticalhumidity;\n\nif (criticalTemperature || criticalHumidity) {\n    // If either critical temperature or critical humidity is true\n    msg.payload = \"Critical temperature or humidity condition is met.\";\n    return msg;\n} else {\n    // If neither critical temperature nor critical humidity is true\n    msg.payload = \"Critical conditions are not met.\";\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 820,
        "wires": [
            [
                "e61c7fc50d9f5291",
                "3b85f7b094d655e3"
            ]
        ]
    },
    {
        "id": "e61c7fc50d9f5291",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "trigger_conditions",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 820,
        "wires": []
    },
    {
        "id": "3b85f7b094d655e3",
        "type": "e-mail",
        "z": "f7a852575a507e30",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "waelkhlifi12@gmail.com",
        "dname": "notification_temperature",
        "x": 610,
        "y": 900,
        "wires": []
    },
    {
        "id": "466f2a15f7ea6ef4",
        "type": "comment",
        "z": "f7a852575a507e30",
        "name": "OPC_UA_SERVER",
        "info": "",
        "x": 90,
        "y": 960,
        "wires": []
    },
    {
        "id": "d567823a7b9e07a5",
        "type": "comment",
        "z": "f7a852575a507e30",
        "name": "LOGIC_ENGINE",
        "info": "",
        "x": 80,
        "y": 600,
        "wires": []
    },
    {
        "id": "20c1b3c67b6dcd17",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "set temperature event as global var",
        "func": "msg.payload= msg.payload.criticaltemp;\nglobal.set(\"critical_temperature\", msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 560,
        "wires": [
            [
                "89709a80b5152bb9"
            ]
        ]
    },
    {
        "id": "89709a80b5152bb9",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "temp_event",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 560,
        "wires": []
    },
    {
        "id": "fa107051b12614c0",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "set humidity event as global var",
        "func": "msg.payload= msg.payload.criticalhumidity;\nglobal.set(\"critical_humidity\", msg.payload);\n\nreturn msg;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 480,
        "wires": [
            [
                "1fa402145eb0e69a"
            ]
        ]
    },
    {
        "id": "1fa402145eb0e69a",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "humd_event",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 480,
        "wires": []
    },
    {
        "id": "7980a2a5b89e84e5",
        "type": "comment",
        "z": "f7a852575a507e30",
        "name": "mqtt interface",
        "info": "",
        "x": 70,
        "y": 1200,
        "wires": []
    },
    {
        "id": "5282dfda6620b9fb",
        "type": "inject",
        "z": "f7a852575a507e30",
        "name": "Simulate Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1260,
        "wires": [
            [
                "0fe35d1b2a540832"
            ]
        ]
    },
    {
        "id": "0fe35d1b2a540832",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "Check Temperature and Humidity",
        "func": "// Define the acceptable range for temperature and humidity\nconst minTemperature = 10; // Minimum temperature\nconst maxTemperature = 20; // Maximum temperature\nconst criticatemp = 20; // critical temperature \nconst minHumidity = 30;    // Minimum humidity\nconst maxHumidity = 40;    // Maximum humidity\nconst critichumidity =80; // critical value for humidity\n// Get the incoming message payload\nvar temperature = global.get('temperature'); // Get temperature from global context\nvar humidity = global.get('humidity'); // Get humidity from global context\n// set global variables that can be used by opc_server\n\n\n// Initialize payload as a JSON object\nvar  data = {\n    timestamp: Date.now(),\n    temperature: temperature,\n    humidity: humidity,\n    criticalhumidity : false,\n    criticaltemp : false,\n    temperatureEvent: \"\",\n    humidityEvent: \"\",\n    turnAC: false // Initialize turn AC variable\n};\n\n\n// Check if temperature is within the acceptable range\nif (temperature < minTemperature) {\n    // Temperature is below the acceptable range\n    data.temperatureEvent = \"Below Min\";\n} else if (temperature > maxTemperature) {\n    // Temperature is above the acceptable range\n    data.temperatureEvent = \"Above Max\";\n    \n}\nelse if (temperature > criticatemp) {\n    // Humidity is above the acceptable range\n    data.criticaltemp= true;\n    }\nelse {\n        msg.payload.temperatureEvent = \"No action\"\n    }\n// Check if humidity is within the acceptable range\nif (humidity < minHumidity) {\n    // Humidity is below the acceptable range\n    data.humidityEvent = \"Below Min\";\n} else if (humidity > maxHumidity) {\n    // Humidity is above the acceptable range\n    data.humidityEvent = \"Above Max\";\n    }\n    \n\nelse {\n        data.humidityEvent = \"No action\"\n    }\n\n// Set turn AC variable based on conditions\nif (data.temperatureEvent === \"Above Max\" || data.humidityEvent === \"Above Max\" || data.criticaltemp==true) {\n    data.turnAC = true; // Turn on AC\n} else {\n    data.turnAC = false; // Turn off AC\n}\n\n\n\n// Return message\nreturn {payload: data};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1260,
        "wires": [
            [
                "c1091735ca285d69"
            ]
        ]
    },
    {
        "id": "c1091735ca285d69",
        "type": "mqtt out",
        "z": "f7a852575a507e30",
        "name": "",
        "topic": "sensordata",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ff246c28cc0fa0af",
        "x": 610,
        "y": 1260,
        "wires": []
    },
    {
        "id": "f6bf295aa617b02b",
        "type": "comment",
        "z": "f7a852575a507e30",
        "name": "bluetooth_interface",
        "info": "",
        "x": 90,
        "y": 40,
        "wires": []
    }
]