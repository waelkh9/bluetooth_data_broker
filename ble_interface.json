[
    {
        "id": "f7a852575a507e30",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9355c4bbb1adc9e0",
        "type": "mqtt-broker",
        "name": "zigbee2mqtt",
        "broker": "mqtt://192.168.1.105",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ff246c28cc0fa0af",
        "type": "mqtt-broker",
        "name": "mqtt_broker",
        "broker": "mqtt://192.168.1.102",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "8b5eb2f1c770a105",
        "type": "pythonshell in",
        "z": "f7a852575a507e30",
        "name": "sensor_data",
        "pyfile": "/home/waelkh12/ble_esp32.py",
        "virtualenv": "",
        "continuous": true,
        "stdInData": false,
        "x": 70,
        "y": 240,
        "wires": [
            [
                "beb41cc912f41cc6",
                "8c79dfb9635bfca3",
                "eda7e98a63d3a7c7"
            ]
        ]
    },
    {
        "id": "beb41cc912f41cc6",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 260,
        "wires": []
    },
    {
        "id": "8c79dfb9635bfca3",
        "type": "string",
        "z": "f7a852575a507e30",
        "name": "",
        "methods": [
            {
                "name": "between",
                "params": [
                    {
                        "type": "str",
                        "value": "temp"
                    },
                    {
                        "type": "str",
                        "value": "\\x"
                    }
                ]
            }
        ],
        "prop": "payload",
        "propout": "payload",
        "object": "msg",
        "objectout": "msg",
        "x": 290,
        "y": 140,
        "wires": [
            [
                "084417715251d3d6",
                "081931b6edc97dad"
            ]
        ]
    },
    {
        "id": "084417715251d3d6",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 140,
        "wires": []
    },
    {
        "id": "eda7e98a63d3a7c7",
        "type": "string",
        "z": "f7a852575a507e30",
        "name": "",
        "methods": [
            {
                "name": "between",
                "params": [
                    {
                        "type": "str",
                        "value": "temp 19.30 \\xc2\\xb0C\\x00\\x00\\x00\\x00\\x00\\x00' b'Humidity   "
                    },
                    {
                        "type": "str",
                        "value": "%\\x"
                    }
                ]
            }
        ],
        "prop": "payload",
        "propout": "payload",
        "object": "msg",
        "objectout": "msg",
        "x": 270,
        "y": 340,
        "wires": [
            [
                "abe2a069eb55f85c",
                "dcbea2b09aabcdb8"
            ]
        ]
    },
    {
        "id": "abe2a069eb55f85c",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 300,
        "wires": []
    },
    {
        "id": "d277eafa14bfd278",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "temperature_global_variable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 160,
        "wires": []
    },
    {
        "id": "d8a68157fd733884",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "set temperature as global variable",
        "func": "global.set(\"temperature\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 240,
        "wires": [
            [
                "d277eafa14bfd278"
            ]
        ]
    },
    {
        "id": "081931b6edc97dad",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "Convert temperature to number",
        "func": "msg.payload = parseFloat(msg.payload); // Convert string to float\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 180,
        "wires": [
            [
                "d8a68157fd733884"
            ]
        ]
    },
    {
        "id": "dcbea2b09aabcdb8",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "convert humidity to a number",
        "func": "msg.payload = parseFloat(msg.payload); // Convert string to float\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 340,
        "wires": [
            [
                "a68146fd61896e57"
            ]
        ]
    },
    {
        "id": "a68146fd61896e57",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "set humidity as global variable",
        "func": "global.set(\"humidity\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 340,
        "wires": [
            [
                "7b08a757d74ab51e"
            ]
        ]
    },
    {
        "id": "7b08a757d74ab51e",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "humidity_global_variable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 340,
        "wires": []
    },
    {
        "id": "f6bf295aa617b02b",
        "type": "comment",
        "z": "f7a852575a507e30",
        "name": "bluetooth_interface",
        "info": "",
        "x": 90,
        "y": 40,
        "wires": []
    },
    {
        "id": "551cc718db60ec28",
        "type": "inject",
        "z": "f7a852575a507e30",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 1180,
        "wires": [
            [
                "7c5168613b18058c"
            ]
        ]
    },
    {
        "id": "7c5168613b18058c",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "Get global variables",
        "func": "flow.set('Temperature', global.get(\"temperature\"));\nflow.set('Humidity', global.get(\"humidity\"));\nflow.set('lux', global.get(\"lux\"));\nflow.set('tempecriticalvl', global.get(\"critical_temperature\"))\nflow.set('humiditycriticalvl', global.get(\"critical_humidity\"))\nflow.set('light_on', global.get(\"light_is_on\"))\nflow.set('light_off', global.get(\"light_is_off\"))\n\n\nmsg.payload = [\n\nflow.get('Temperature'),\nflow.get('Humidity'),\nflow.get('lux'),\nflow.get('tempecriticalvl'),\nflow.get('humiditycriticalvl'),\nflow.get('light_on'),\nflow.get('light_off')\n\n\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1180,
        "wires": [
            [
                "02e10733974ebc0a"
            ]
        ]
    },
    {
        "id": "02e10733974ebc0a",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "global variables array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1180,
        "wires": []
    },
    {
        "id": "daeebc6c75047233",
        "type": "opcua-compact-server",
        "z": "f7a852575a507e30",
        "port": "4840",
        "endpoint": "",
        "productUri": "",
        "acceptExternalCommands": true,
        "maxAllowedSessionNumber": 10,
        "maxConnectionsPerEndpoint": 10,
        "maxAllowedSubscriptionNumber": 100,
        "alternateHostname": "",
        "name": "",
        "showStatusActivities": true,
        "showErrors": true,
        "allowAnonymous": true,
        "individualCerts": false,
        "isAuditing": false,
        "serverDiscovery": true,
        "users": [],
        "xmlsetsOPCUA": [],
        "publicCertificateFile": "",
        "privateCertificateFile": "",
        "registerServerMethod": "1",
        "discoveryServerEndpointUrl": "opc.tcp://192.168.1.102:4840",
        "capabilitiesForMDNS": "",
        "maxNodesPerRead": 1000,
        "maxNodesPerWrite": 1000,
        "maxNodesPerHistoryReadData": 100,
        "maxNodesPerBrowse": 3000,
        "maxBrowseContinuationPoints": 10,
        "maxHistoryContinuationPoints": 10,
        "delayToInit": 1000,
        "delayToClose": 200,
        "serverShutdownTimeout": 100,
        "addressSpaceScript": "function constructAlarmAddressSpace(server, addressSpace, eventObjects, done) {\n  // server = the created node-opcua server\n  // addressSpace = address space of the node-opcua server\n  // eventObjects = add event variables here to hold them in memory from this script\n\n  // internal sandbox objects are:\n  // node = the compact server node,\n  // coreServer = core compact server object for debug and access to NodeOPCUA\n  // this.sandboxNodeContext = node context node-red\n  // this.sandboxFlowContext = flow context node-red\n  // this.sandboxGlobalContext = global context node-red\n  // this.sandboxEnv = env variables\n  // timeout and interval functions as expected from nodejs\n\n  \n  const opcua = coreServer.choreCompact.opcua;\n  const LocalizedText = opcua.LocalizedText;\n  const namespace = addressSpace.getOwnNamespace();\n\n  const Variant = opcua.Variant;\n  const DataType = opcua.DataType;\n  const DataValue = opcua.DataValue;\n\n  var flexServerInternals = this;\n\n  \n  const rootFolder = addressSpace.findNode(\"RootFolder\");\n\n  this.sandboxFlowContext.set(\"Humidity\", false);\n  this.sandboxFlowContext.set(\"Temperature\", false);\n  this.sandboxFlowContext.set(\"humiditycriticalvl\", false);\n  this.sandboxFlowContext.set(\"tempecriticalvl\", false);\n  this.sandboxFlowContext.set(\"light_on\", false);\n\n  this.sandboxFlowContext.set(\"access\", false);\n  this.sandboxFlowContext.set(\"illuminance\", false);\n\n\n  const sensor_Data = namespace.addFolder(rootFolder.objects, {\n    \"browseName\": \"Sensor_data\"\n  });\n  const access_control = namespace.addFolder(rootFolder.objects, {\n    \"browseName\": \"access_control\"\n  });\n  const access = namespace.addFolder(access_control, {\n    \"browseName\": \"access_event\"\n  });\n  const temperature = namespace.addFolder(sensor_Data, {\n    \"browseName\": \"temperature\"\n  });\n  const humidity = namespace.addFolder(sensor_Data, {\n    \"browseName\": \"humidity\"\n  });\n  const temperature_float = namespace.addFolder(temperature, {\n    \"browseName\": \"Float_C\"\n  });\n  const humidity_float = namespace.addFolder(humidity, {\n    \"browseName\": \"humidity_%\"\n  });\n  const tempCritical = namespace.addFolder(sensor_Data, {\n    \"browseName\": \"Temp_critical\"\n  });\n  const humidityCritical = namespace.addFolder(sensor_Data, {\n    \"browseName\": \"Humidity_critical\"\n  });\n   const light_on = namespace.addFolder(sensor_Data, {\n    \"browseName\": \"light_on\"\n  });\n  const illuminance = namespace.addFolder(sensor_Data, {\n  \"browseName\": \"illuminance\"\n  });\n  const temperature_var = namespace.addVariable({\n    \"organizedBy\": temperature_float,\n    \"browseName\": \"temperature\",\n    \"nodeId\": \"ns=1;s=Temperature_value\",\n    \"dataType\": \"Double\",\n    \"value\": {\n      \"get\": function () {\n        return new Variant({\n          \"dataType\": DataType.Double,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"Temperature\")\n        });\n      },\n      \"set\": function (Variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"Temperature\",\n          Variant.value\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n  const humidity_var = namespace.addVariable({\n    \"organizedBy\": humidity_float,\n    \"browseName\": \"Humidity\",\n    \"nodeId\": \"ns=1;s=Humidity_value\",\n    \"dataType\": \"Double\",\n    \"value\": {\n      \"get\": function () {\n        return new Variant({\n          \"dataType\": DataType.Double,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"Humidity\")\n        });\n      },\n      \"set\": function (Variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"Humidity\",\n          Variant.value\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n    const temperatureCritical = namespace.addVariable({\n    \"organizedBy\": tempCritical,\n    \"browseName\": \"critical_temperature\",\n    \"nodeId\": \"ns=1;s=Temp_critical_value\",\n    \"dataType\": \"Boolean\",\n    \"value\": {\n      \"get\": function () {\n        return new Variant({\n          \"dataType\": DataType.Boolean,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"tempecriticalvl\")\n        });\n      },\n      \"set\": function (variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"tempecriticalvl\",\n          variant.value\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n\n  const humidityCrit = namespace.addVariable({\n    \"organizedBy\": humidityCritical,\n    \"browseName\": \"critical_humidity\",\n    \"nodeId\": \"ns=1;s=Humidity_critical_value\",\n    \"dataType\": \"Boolean\",\n    \"value\": {\n      \"get\": function () {\n        return new Variant({\n          \"dataType\": DataType.Boolean,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"humiditycriticalvl\")\n        });\n      },\n      \"set\": function (variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"humiditycriticalvl\",\n          variant.value\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n  const light_on_event = namespace.addVariable({\n    \"organizedBy\": light_on,\n    \"browseName\": \"light_is_on\",\n    \"nodeId\": \"ns=1;s=light_is_on\",\n    \"dataType\": \"Boolean\",\n    \"value\": {\n      \"get\": function () {\n        return new Variant({\n          \"dataType\": DataType.Boolean,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"light_on\")\n        });\n      },\n      \"set\": function (variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"light_on\",\n          variant.value\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n  const accessevent= namespace.addVariable({\n    \"organizedBy\": access_control,\n    \"browseName\": \"Value\",\n    \"nodeId\": \"ns=1;s=accessevent\",\n    \"dataType\": \"Boolean\",\n    \"value\": {\n      \"get\": function () {\n        return new Variant({\n          \"dataType\": DataType.Boolean,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"access\")\n        });\n      },\n      \"set\": function (variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"access\",\n          variant.value\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\nconst illuminance_var = namespace.addVariable({\n    \"organizedBy\": illuminance,\n    \"browseName\": \"illuminance\",\n    \"nodeId\": \"ns=1;s=illuminance_value\",\n    \"dataType\": \"Double\",\n    \"value\": {\n      \"get\": function () {\n        return new Variant({\n          \"dataType\": DataType.Double,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"lux\")\n        });\n      },\n      \"set\": function (Variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"lux\",\n          Variant.value\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n  });\n  \n  done();\n}",
        "x": 540,
        "y": 1280,
        "wires": []
    },
    {
        "id": "1228e24583e175b4",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "Check Temperature and Humidity",
        "func": "// Define the acceptable range for temperature and humidity\nconst minTemperature = 10; // Minimum temperature\nconst maxTemperature = 20; // Maximum temperature\nconst criticatemp = 20; // critical temperature \nconst minHumidity = 30;    // Minimum humidity\nconst maxHumidity = 40;    // Maximum humidity\nconst critichumidity =40; // critical value for humidity\nconst minlux= 30;\nconst maxlux=500;\n// Get the incoming message payload\nvar temperature = global.get('temperature'); // Get temperature from global context\nvar humidity = global.get('humidity'); // Get humidity from global context\nvar lux= global.get('lux'); // get illuminance value\n\n// set global variables that can be used by opc_server\n\n\n// Initialize payload as a JSON object\nvar  data = {\n    timestamp: Date.now(),\n    temperature: temperature,\n    humidity: humidity,\n    criticalhumidity : false,\n    criticaltemp : false,\n    temperatureEvent: \"\",\n    humidityEvent: \"\",\n    turnlighton: false,\n    turnlightoff: false,\n    turnAC: false // Initialize turn AC variable\n};\n\n\n// Check if temperature is within the acceptable range\nif (temperature < minTemperature) {\n    // Temperature is below the acceptable range\n    data.temperatureEvent = \"Below Min\";\n} else if (temperature > maxTemperature && temperature > criticatemp) {\n    // Temperature is above the acceptable range\n    data.temperatureEvent = \"Above Max\";\n    data.criticaltemp= true;\n}\nelse if (temperature > maxTemperature && temperature < criticatemp) {\n    // Humidity is above the acceptable range\n    data.temperatureEvent = \"Above Max\";\n    data.criticaltemp= false;\n    }\nelse {\n        msg.payload.temperatureEvent = \"No action\"\n    }\n// Check if humidity is within the acceptable range\nif (humidity < minHumidity) {\n    // Humidity is below the acceptable range\n    data.humidityEvent = \"Below Min\";\n} else if (humidity > maxHumidity && humidity > critichumidity) {\n    // Humidity is above the acceptable range\n    data.humidityEvent = \"Above Max\";\n    data.criticalhumidity = true;\n\n    }\nelse if (humidity > maxHumidity && humidity <critichumidity) {\n    // Humidity is above the acceptable range\n    data.humidityEvent = \"Above Max\";\n    data.criticalhumidity = false;\n\n} \n\nelse {\n        data.humidityEvent = \"No action\"\n    }\n\n// Set turn AC variable based on conditions\nif (data.temperatureEvent === \"Above Max\" || data.humidityEvent === \"Above Max\" || data.criticaltemp==true) {\n    data.turnAC = true; // Turn on AC\n} else {\n    data.turnAC = false; // Turn off AC\n}\nif (lux > minlux) {\n    data.turnlighton = true; // Turn on AC\n} else {\n    data.turnlightoff = true; // Turn off AC\n}\n\n\n\n// Return message\nreturn {payload: data};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 820,
        "wires": [
            [
                "55e76222fa58a971",
                "f32a35d9c355b4c4",
                "282f350354d5246d",
                "4b40f513c0f99b4f",
                "ab12c29ae336b6f6",
                "074c4f8b6e36bea3"
            ]
        ]
    },
    {
        "id": "55e76222fa58a971",
        "type": "csv",
        "z": "f7a852575a507e30",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "",
        "multi": "one",
        "ret": "\\n",
        "temp": "timestamp,temperature,humidity,temperatureEvent,humidityEvent,turnAC",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 570,
        "y": 820,
        "wires": [
            [
                "44db8b47041d0ac9"
            ]
        ]
    },
    {
        "id": "44db8b47041d0ac9",
        "type": "file",
        "z": "f7a852575a507e30",
        "d": true,
        "name": "",
        "filename": "C:\\Users\\waelk\\Desktop\\test.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 780,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "ad56cc78665aaf47",
        "type": "inject",
        "z": "f7a852575a507e30",
        "name": "Simulate Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 820,
        "wires": [
            [
                "1228e24583e175b4"
            ]
        ]
    },
    {
        "id": "f32a35d9c355b4c4",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "object containing_data_and_events",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 900,
        "wires": []
    },
    {
        "id": "91bde4f062b37b72",
        "type": "comment",
        "z": "f7a852575a507e30",
        "name": "sending notifications to2",
        "info": "",
        "x": 100,
        "y": 900,
        "wires": []
    },
    {
        "id": "282f350354d5246d",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "check_critical_temperature_trigger",
        "func": "msg.topic=\"node-red-notification\"\nvar inputObject = msg.payload;\n\nvar criticalTemperature = inputObject.criticaltemp;\nvar criticalHumidity = inputObject.criticalhumidity;\n\n// Define the interval time in milliseconds (e.g., 10 minutes = 600000 ms)\nvar intervalTime = 600000;\n\nif (criticalTemperature || criticalHumidity) {\n    // Get the current time\n    var currentTime = Date.now();\n\n    // Get the last sent time from the global context, defaulting to 0 if not set\n    var lastSentTime = context.global.get('lastSentTime') || 0;\n\n    // Check if the interval has passed since the last message was sent\n    if (currentTime - lastSentTime > intervalTime) {\n        // Update the last sent time in the global context\n        context.global.set('lastSentTime', currentTime);\n\n        // Set the message payload to indicate critical conditions\n        msg.payload = \"Critical temperature or humidity condition is met.\";\n        return msg;\n    } else {\n        // Interval has not passed, do not send a message\n        return null;\n    }\n} else {\n    // Critical conditions are not met, do not send a message\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 980,
        "wires": [
            [
                "b9cb8edb48a854d6",
                "ee5afacd79cfb293"
            ]
        ]
    },
    {
        "id": "b9cb8edb48a854d6",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "trigger_conditions",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 980,
        "wires": []
    },
    {
        "id": "7c71dc1e8608ec66",
        "type": "e-mail",
        "z": "f7a852575a507e30",
        "server": "mail.gmx.net",
        "port": "587",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": false,
        "tls": true,
        "name": "node-redpi@gmx.de",
        "dname": "notification_temperature",
        "x": 890,
        "y": 1060,
        "wires": []
    },
    {
        "id": "7b499b1e30d508f2",
        "type": "comment",
        "z": "f7a852575a507e30",
        "name": "OPC_UA_SERVER",
        "info": "",
        "x": 90,
        "y": 1120,
        "wires": []
    },
    {
        "id": "c0be9f9928fc7632",
        "type": "comment",
        "z": "f7a852575a507e30",
        "name": "LOGIC_ENGINE",
        "info": "",
        "x": 80,
        "y": 760,
        "wires": []
    },
    {
        "id": "4b40f513c0f99b4f",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "set temperature event as global var",
        "func": "msg.payload= msg.payload.criticaltemp;\nglobal.set(\"critical_temperature\", msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 720,
        "wires": [
            [
                "23f018eb4e69ad8f"
            ]
        ]
    },
    {
        "id": "23f018eb4e69ad8f",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "temp_event",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 720,
        "wires": []
    },
    {
        "id": "ab12c29ae336b6f6",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "set humidity event as global var",
        "func": "msg.payload= msg.payload.criticalhumidity;\nglobal.set(\"critical_humidity\", msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 640,
        "wires": [
            [
                "6022f60746823b1b"
            ]
        ]
    },
    {
        "id": "6022f60746823b1b",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "humd_event",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 640,
        "wires": []
    },
    {
        "id": "d820ba9550176f98",
        "type": "comment",
        "z": "f7a852575a507e30",
        "name": "mqtt interface",
        "info": "",
        "x": 70,
        "y": 1360,
        "wires": []
    },
    {
        "id": "165ee36c7936fd3b",
        "type": "inject",
        "z": "f7a852575a507e30",
        "name": "Simulate Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1420,
        "wires": [
            [
                "28d942c8e782ec3b"
            ]
        ]
    },
    {
        "id": "28d942c8e782ec3b",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "Check Temperature and Humidity",
        "func": "// Define the acceptable range for temperature and humidity\nconst minTemperature = 10; // Minimum temperature\nconst maxTemperature = 20; // Maximum temperature\nconst criticatemp = 20; // critical temperature \nconst minHumidity = 30;    // Minimum humidity\nconst maxHumidity = 40;    // Maximum humidity\nconst critichumidity =80; // critical value for humidity\n// Get the incoming message payload\nvar temperature = global.get('temperature'); // Get temperature from global context\nvar humidity = global.get('humidity'); // Get humidity from global context\n// set global variables that can be used by opc_server\n\n\n// Initialize payload as a JSON object\nvar  data = {\n    timestamp: Date.now(),\n    temperature: temperature,\n    humidity: humidity,\n    criticalhumidity : false,\n    criticaltemp : false,\n    temperatureEvent: \"\",\n    humidityEvent: \"\",\n    turnAC: false // Initialize turn AC variable\n};\n\n\n// Check if temperature is within the acceptable range\nif (temperature < minTemperature) {\n    // Temperature is below the acceptable range\n    data.temperatureEvent = \"Below Min\";\n} else if (temperature > maxTemperature) {\n    // Temperature is above the acceptable range\n    data.temperatureEvent = \"Above Max\";\n    \n}\nelse if (temperature > criticatemp) {\n    // Humidity is above the acceptable range\n    data.criticaltemp= true;\n    }\nelse {\n        msg.payload.temperatureEvent = \"No action\"\n    }\n// Check if humidity is within the acceptable range\nif (humidity < minHumidity) {\n    // Humidity is below the acceptable range\n    data.humidityEvent = \"Below Min\";\n} else if (humidity > maxHumidity) {\n    // Humidity is above the acceptable range\n    data.humidityEvent = \"Above Max\";\n    }\n    \n\nelse {\n        data.humidityEvent = \"No action\"\n    }\n\n// Set turn AC variable based on conditions\nif (data.temperatureEvent === \"Above Max\" || data.humidityEvent === \"Above Max\" || data.criticaltemp==true) {\n    data.turnAC = true; // Turn on AC\n} else {\n    data.turnAC = false; // Turn off AC\n}\n\n\n\n// Return message\nreturn {payload: data};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1420,
        "wires": [
            [
                "662f99966cc693f7"
            ]
        ]
    },
    {
        "id": "662f99966cc693f7",
        "type": "mqtt out",
        "z": "f7a852575a507e30",
        "name": "",
        "topic": "sensordata",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ff246c28cc0fa0af",
        "x": 610,
        "y": 1420,
        "wires": []
    },
    {
        "id": "02ad7c1d784ec55a",
        "type": "comment",
        "z": "f7a852575a507e30",
        "name": "access control",
        "info": "",
        "x": 70,
        "y": 1520,
        "wires": []
    },
    {
        "id": "f0e9fba8eeb0035a",
        "type": "pythonshell in",
        "z": "f7a852575a507e30",
        "name": "acces_control",
        "pyfile": "/home/waelkh12/Desktop/tf_lite_face_reco/facial_recognition_for_access_control/test_model/use_tflite.py",
        "virtualenv": "",
        "continuous": false,
        "stdInData": false,
        "x": 840,
        "y": 1700,
        "wires": [
            [
                "7515cf215ca0fe11",
                "a7da26cd935a805f"
            ]
        ]
    },
    {
        "id": "59c555b0fd60e027",
        "type": "mqtt in",
        "z": "f7a852575a507e30",
        "name": "",
        "topic": "command_access_control",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ff246c28cc0fa0af",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 1620,
        "wires": [
            [
                "9c0e4e1eef91e0a6",
                "9701ea8252c63d27"
            ]
        ]
    },
    {
        "id": "9c0e4e1eef91e0a6",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "access_command",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 170,
        "y": 1680,
        "wires": []
    },
    {
        "id": "7515cf215ca0fe11",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "image_quality_output_value",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 1700,
        "wires": []
    },
    {
        "id": "7383d66e8324869d",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "check_image_quality_condition",
        "func": " if (msg.payload= true) {\nreturn msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1560,
        "wires": [
            [
                "f0e9fba8eeb0035a"
            ]
        ]
    },
    {
        "id": "a7da26cd935a805f",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "sets_access_as_global_event",
        "func": "global.set(\"access\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1560,
        "wires": [
            [
                "ac37a260b268acee",
                "2b705a94b04d318c"
            ]
        ]
    },
    {
        "id": "ac37a260b268acee",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "access_event_value",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 1700,
        "wires": []
    },
    {
        "id": "2b705a94b04d318c",
        "type": "mqtt out",
        "z": "f7a852575a507e30",
        "name": "",
        "topic": "command_access_control",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ff246c28cc0fa0af",
        "x": 1170,
        "y": 1560,
        "wires": []
    },
    {
        "id": "074c4f8b6e36bea3",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "set light event as global var",
        "func": "var lighton= msg.payload.turnlighton;\nvar lightoff =msg.payload.turnlightoff;\nglobal.set(\"light_is_on\", lighton);\nglobal.set(\"light_is_off\", lightoff);\n\n\nreturn lighton,lightoff;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 580,
        "wires": [
            [
                "59cc2308c89a6a75"
            ]
        ]
    },
    {
        "id": "59cc2308c89a6a75",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "light_event",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 580,
        "wires": []
    },
    {
        "id": "dcac238a86f256a9",
        "type": "inject",
        "z": "f7a852575a507e30",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 1020,
        "wires": [
            [
                "282f350354d5246d"
            ]
        ]
    },
    {
        "id": "ee5afacd79cfb293",
        "type": "trigger",
        "z": "f7a852575a507e30",
        "name": "email_trigger",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 390,
        "y": 1080,
        "wires": [
            [
                "84782a8eed5c556f"
            ]
        ]
    },
    {
        "id": "84782a8eed5c556f",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "function 1",
        "func": "msg.topic=\"node-red-notification\";\nmsg.payload=\" critical values reached\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1080,
        "wires": [
            [
                "7c71dc1e8608ec66"
            ]
        ]
    },
    {
        "id": "9701ea8252c63d27",
        "type": "function",
        "z": "f7a852575a507e30",
        "name": "check_access_command",
        "func": " if (msg.payload= true) {\nreturn msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1560,
        "wires": [
            [
                "9befc7901ca0a446"
            ]
        ]
    },
    {
        "id": "9befc7901ca0a446",
        "type": "pythonshell in",
        "z": "f7a852575a507e30",
        "name": "image_quality",
        "pyfile": "/home/waelkh12/Desktop/tf_lite_face_reco/facial_recognition_for_access_control/face_image_quality/face_image_quality.py",
        "virtualenv": "",
        "continuous": false,
        "stdInData": false,
        "x": 380,
        "y": 1720,
        "wires": [
            [
                "7383d66e8324869d",
                "89b673723d08d7bd"
            ]
        ]
    },
    {
        "id": "89b673723d08d7bd",
        "type": "debug",
        "z": "f7a852575a507e30",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 1780,
        "wires": []
    }
]